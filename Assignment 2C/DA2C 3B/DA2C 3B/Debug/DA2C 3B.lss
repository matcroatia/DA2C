
DA2C 3B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000723  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000688  00000000  00000000  000008e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029e  00000000  00000000  00000f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a4  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000097  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001687  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/interrupt.h>

int main(void)
{

	DDRB |= (1 << PB2);				//set PB2 as output port
  80:	22 9a       	sbi	0x04, 2	; 4
	PORTC = (1 << PINC2);		    //set PINC as input
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	88 b9       	out	0x08, r24	; 8
	TCNT0 = 0;					    //initiate timer
  86:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1 << WGM01);			//initiate CTC mode
  88:	84 b5       	in	r24, 0x24	; 36
  8a:	82 60       	ori	r24, 0x02	; 2
  8c:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 0x05;					//set pre-scaler to 1024
  8e:	85 b5       	in	r24, 0x25	; 37
  90:	85 60       	ori	r24, 0x05	; 5
  92:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);		//enable Overflow compare
  94:	ee e6       	ldi	r30, 0x6E	; 110
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	82 60       	ori	r24, 0x02	; 2
  9c:	80 83       	st	Z, r24
	sei ();							//enable interrupt
  9e:	78 94       	sei
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x20>

000000a2 <__vector_14>:
	}
	
}

ISR(TIMER0_COMPA_vect)					//compare interrupt loop
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
	uint8_t OVFCount=0;					//initiate overflow count
	TCNT0=0x00;							//reset the timer to zero
  ac:	16 bc       	out	0x26, r1	; 38
	OVFCount++;							//increment overflow count
	
	DDRB = 0x02;						//sets PB2 as output
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	84 b9       	out	0x04, r24	; 4
	while(1)							//loop for while LED on
	{
		if ((PINC & (1 << PC2)) == (1<<PC2)) //if to light up LED when button is pressed
		{
			PORTB = 0xFF;				//Turns ON LED
  b2:	8f ef       	ldi	r24, 0xFF	; 255
	OVFCount++;							//increment overflow count
	
	DDRB = 0x02;						//sets PB2 as output
	while(1)							//loop for while LED on
	{
		if ((PINC & (1 << PC2)) == (1<<PC2)) //if to light up LED when button is pressed
  b4:	32 9b       	sbis	0x06, 2	; 6
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <__vector_14+0x12>
		{
			PORTB = 0xFF;				//Turns ON LED
  b8:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	3b e4       	ldi	r19, 0x4B	; 75
  be:	9d e1       	ldi	r25, 0x1D	; 29
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <__vector_14+0x1e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <__vector_14+0x28>
  ca:	00 00       	nop
			_delay_ms(600);				//1.2 second delay
			PORTB = 0;					//Turns OFF LED
  cc:	15 b8       	out	0x05, r1	; 5
  ce:	f2 cf       	rjmp	.-28     	; 0xb4 <__vector_14+0x12>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
