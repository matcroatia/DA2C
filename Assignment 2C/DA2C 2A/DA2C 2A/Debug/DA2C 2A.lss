
DA2C 2A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a2  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061f  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000274  00000000  00000000  00000e9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000359  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b0  00000000  00000000  000014c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001571  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_16>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/interrupt.h>

int main(void)
{
	    
	DDRB |= (1 << PB2);      //sets PB2 as output
  80:	22 9a       	sbi	0x04, 2	; 4
	TCCR0B = 0x05;           //initiates timer0
  82:	85 e0       	ldi	r24, 0x05	; 5
  84:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0x00;			 //initiates counter
  86:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1 << TOIE0);       //enable external interrupt 0
  88:	ee e6       	ldi	r30, 0x6E	; 110
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	81 60       	ori	r24, 0x01	; 1
  90:	80 83       	st	Z, r24
	sei();                   //enable interrupts
  92:	78 94       	sei
  94:	ff cf       	rjmp	.-2      	; 0x94 <main+0x14>

00000096 <__vector_16>:
		
	}
	
}
ISR (TIMER0_OVF_vect) //ISR for external interrupt 0
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
	uint8_t OVFCount = 0;      //initiates unit overflow counter
  a8:	80 e0       	ldi	r24, 0x00	; 0
	while((TIFR0 & 0x01) == 1) //loop while overflow flag is set
	{
		TCNT0 = 0x00;		   //initiate counter to 0
		TIFR0 = 0x01;		   //set timer overflow count to 1
  aa:	91 e0       	ldi	r25, 0x01	; 1
		OVFCount++;			   //increment overflow counter
		if (OVFCount == 13)	   //set overflow count limit
		{
			PORTB ^= (1 << PB2);  //turns on LED
  ac:	34 e0       	ldi	r19, 0x04	; 4
			OVFCount = 0;		  //resets over flow count to 0
			while((TIFR0 & 0x01) == 1) //loop while overflow flag is set
			{
				TCNT0 = 0x68;			//counter initiated at 0x68
  ae:	28 e6       	ldi	r18, 0x68	; 104
	
}
ISR (TIMER0_OVF_vect) //ISR for external interrupt 0
{
	uint8_t OVFCount = 0;      //initiates unit overflow counter
	while((TIFR0 & 0x01) == 1) //loop while overflow flag is set
  b0:	12 c0       	rjmp	.+36     	; 0xd6 <__vector_16+0x40>
	{
		TCNT0 = 0x00;		   //initiate counter to 0
  b2:	16 bc       	out	0x26, r1	; 38
		TIFR0 = 0x01;		   //set timer overflow count to 1
  b4:	95 bb       	out	0x15, r25	; 21
		OVFCount++;			   //increment overflow counter
  b6:	8f 5f       	subi	r24, 0xFF	; 255
		if (OVFCount == 13)	   //set overflow count limit
  b8:	8d 30       	cpi	r24, 0x0D	; 13
  ba:	69 f4       	brne	.+26     	; 0xd6 <__vector_16+0x40>
		{
			PORTB ^= (1 << PB2);  //turns on LED
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	83 27       	eor	r24, r19
  c0:	85 b9       	out	0x05, r24	; 5
			OVFCount = 0;		  //resets over flow count to 0
			while((TIFR0 & 0x01) == 1) //loop while overflow flag is set
  c2:	06 c0       	rjmp	.+12     	; 0xd0 <__vector_16+0x3a>
			{
				TCNT0 = 0x68;			//counter initiated at 0x68
  c4:	26 bd       	out	0x26, r18	; 38
				TIFR0 = 0x01;			//set timer overflow count to 1
  c6:	95 bb       	out	0x15, r25	; 21
				OVFCount++;				//increment overflow counter
  c8:	8f 5f       	subi	r24, 0xFF	; 255
				if (OVFCount == 9)		//set overflow count limit
  ca:	89 30       	cpi	r24, 0x09	; 9
  cc:	11 f4       	brne	.+4      	; 0xd2 <__vector_16+0x3c>
				{
					PORTB &= ~(1<<PB2); //turn off LED
  ce:	2a 98       	cbi	0x05, 2	; 5
		
	}
	
}
ISR (TIMER0_OVF_vect) //ISR for external interrupt 0
{
  d0:	80 e0       	ldi	r24, 0x00	; 0
		OVFCount++;			   //increment overflow counter
		if (OVFCount == 13)	   //set overflow count limit
		{
			PORTB ^= (1 << PB2);  //turns on LED
			OVFCount = 0;		  //resets over flow count to 0
			while((TIFR0 & 0x01) == 1) //loop while overflow flag is set
  d2:	a8 99       	sbic	0x15, 0	; 21
  d4:	f7 cf       	rjmp	.-18     	; 0xc4 <__vector_16+0x2e>
	
}
ISR (TIMER0_OVF_vect) //ISR for external interrupt 0
{
	uint8_t OVFCount = 0;      //initiates unit overflow counter
	while((TIFR0 & 0x01) == 1) //loop while overflow flag is set
  d6:	a8 99       	sbic	0x15, 0	; 21
  d8:	ec cf       	rjmp	.-40     	; 0xb2 <__vector_16+0x1c>
				}
			}
		}
	}
	
}
  da:	9f 91       	pop	r25
  dc:	8f 91       	pop	r24
  de:	3f 91       	pop	r19
  e0:	2f 91       	pop	r18
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
