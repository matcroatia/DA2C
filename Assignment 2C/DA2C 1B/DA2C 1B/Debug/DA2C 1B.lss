
DA2C 1B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000000fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000012c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068c  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000216  00000000  00000000  00000e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001038  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000050  00000000  00000000  000013a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 8000000UL

int main(void)
{
	uint8_t OVFCount = 0;    //initiates unit overflow counter
	TCCR0B = 0x05;           //initiates timer0
  80:	85 e0       	ldi	r24, 0x05	; 5
  82:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0x00;			 //initiates counter
  84:	16 bc       	out	0x26, r1	; 38
	DDRB = 0xFF;             //sets PB2 as output
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	84 b9       	out	0x04, r24	; 4
		
			//while((TIFR0 & 0x01) == 1) //loop while overflow flag is set
			//{
				if ((PINC & (1 << PC2)) == (1<<PC2)) //if to light up LED when button is pressed
				{
					PORTB = 0xFF; //Turns ON LED
  8a:	2f ef       	ldi	r18, 0xFF	; 255
					TCNT0 = 0x00;		   //initiate counter to 0
					TIFR0 = 0x01;		   //set timer overflow count to 1
  8c:	91 e0       	ldi	r25, 0x01	; 1

#include <avr/io.h>
#define F_CPU 8000000UL

int main(void)
{
  8e:	87 e2       	ldi	r24, 0x27	; 39
	while(1)                 //loop for while LED on
	{
		
			//while((TIFR0 & 0x01) == 1) //loop while overflow flag is set
			//{
				if ((PINC & (1 << PC2)) == (1<<PC2)) //if to light up LED when button is pressed
  90:	32 9b       	sbis	0x06, 2	; 6
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x10>
				{
					PORTB = 0xFF; //Turns ON LED
  94:	25 b9       	out	0x05, r18	; 5
					TCNT0 = 0x00;		   //initiate counter to 0
  96:	16 bc       	out	0x26, r1	; 38
					TIFR0 = 0x01;		   //set timer overflow count to 1
  98:	95 bb       	out	0x15, r25	; 21
  9a:	81 50       	subi	r24, 0x01	; 1
					OVFCount++;			   //increment overflow counter
					if (OVFCount == 39)	   //set overflow count limit
  9c:	c9 f7       	brne	.-14     	; 0x90 <main+0x10>
					{
						PORTB = 0; 
  9e:	15 b8       	out	0x05, r1	; 5
  a0:	f6 cf       	rjmp	.-20     	; 0x8e <main+0xe>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
