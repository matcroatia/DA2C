
Assignment 2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068c  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000133  00000000  00000000  00000e37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034b  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004d  00000000  00000000  000012db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
	uint8_t OVFCount = 0;    //initiates unit overflow counter
	DDRB |= (1 << PB2);      //sets PB2 as output
  80:	22 9a       	sbi	0x04, 2	; 4
	TCCR0B = 0x05;           //initiates timer0
  82:	85 e0       	ldi	r24, 0x05	; 5
  84:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0x00;			 //initiates counter
  86:	16 bc       	out	0x26, r1	; 38
#define F_CPU 8000000UL


int main(void)
{
	uint8_t OVFCount = 0;    //initiates unit overflow counter
  88:	80 e0       	ldi	r24, 0x00	; 0
	while(1)
	{
		while((TIFR0 & 0x01) == 1) //loop while overflow flag is set
		{
			TCNT0 = 0x00;		   //initiate counter to 0
			TIFR0 = 0x01;		   //set timer overflow count to 1
  8a:	91 e0       	ldi	r25, 0x01	; 1
			OVFCount++;			   //increment overflow counter
			if (OVFCount == 13)	   //set overflow count limit
			{
				PORTB ^= (1 << PB2);  //turns on LED
  8c:	34 e0       	ldi	r19, 0x04	; 4
				OVFCount = 0;		  //resets over flow count to 0
				while((TIFR0 & 0x01) == 1) //loop while overflow flag is set
				{
					TCNT0 = 0x68;			//counter initiated at 0x68
  8e:	28 e6       	ldi	r18, 0x68	; 104
  90:	12 c0       	rjmp	.+36     	; 0xb6 <main+0x36>
	
	while(1)
	{
		while((TIFR0 & 0x01) == 1) //loop while overflow flag is set
		{
			TCNT0 = 0x00;		   //initiate counter to 0
  92:	16 bc       	out	0x26, r1	; 38
			TIFR0 = 0x01;		   //set timer overflow count to 1
  94:	95 bb       	out	0x15, r25	; 21
			OVFCount++;			   //increment overflow counter
  96:	8f 5f       	subi	r24, 0xFF	; 255
			if (OVFCount == 13)	   //set overflow count limit
  98:	8d 30       	cpi	r24, 0x0D	; 13
  9a:	69 f4       	brne	.+26     	; 0xb6 <main+0x36>
			{
				PORTB ^= (1 << PB2);  //turns on LED
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	83 27       	eor	r24, r19
  a0:	85 b9       	out	0x05, r24	; 5
				OVFCount = 0;		  //resets over flow count to 0
				while((TIFR0 & 0x01) == 1) //loop while overflow flag is set
  a2:	06 c0       	rjmp	.+12     	; 0xb0 <main+0x30>
				{
					TCNT0 = 0x68;			//counter initiated at 0x68
  a4:	26 bd       	out	0x26, r18	; 38
					TIFR0 = 0x01;			//set timer overflow count to 1
  a6:	95 bb       	out	0x15, r25	; 21
					OVFCount++;				//increment overflow counter
  a8:	8f 5f       	subi	r24, 0xFF	; 255
					if (OVFCount == 9)		//set overflow count limit
  aa:	89 30       	cpi	r24, 0x09	; 9
  ac:	11 f4       	brne	.+4      	; 0xb2 <main+0x32>
					{
						PORTB &= ~(1<<PB2); //turn off LED
  ae:	2a 98       	cbi	0x05, 2	; 5
#include <avr/io.h>
#define F_CPU 8000000UL


int main(void)
{
  b0:	80 e0       	ldi	r24, 0x00	; 0
			OVFCount++;			   //increment overflow counter
			if (OVFCount == 13)	   //set overflow count limit
			{
				PORTB ^= (1 << PB2);  //turns on LED
				OVFCount = 0;		  //resets over flow count to 0
				while((TIFR0 & 0x01) == 1) //loop while overflow flag is set
  b2:	a8 99       	sbic	0x15, 0	; 21
  b4:	f7 cf       	rjmp	.-18     	; 0xa4 <main+0x24>
	TCCR0B = 0x05;           //initiates timer0
	TCNT0 = 0x00;			 //initiates counter
	
	while(1)
	{
		while((TIFR0 & 0x01) == 1) //loop while overflow flag is set
  b6:	a8 9b       	sbis	0x15, 0	; 21
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <main+0x36>
  ba:	eb cf       	rjmp	.-42     	; 0x92 <main+0x12>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
