
DA2C 3A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000162  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a4  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000232  00000000  00000000  00000ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000359  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  00001491  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000014cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

int main(void)
{
	
	
	DDRB |= (1 << PB2);		  //sets POTRB as output
  90:	22 9a       	sbi	0x04, 2	; 4
	TIMSK0 |= (1 << OCIE0A);  //enable overflow compare register
  92:	ee e6       	ldi	r30, 0x6E	; 110
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	80 83       	st	Z, r24
	TCNT0 = 0;				  //initiate timer 
  9c:	16 bc       	out	0x26, r1	; 38
	TCCR0A |= (1 << WGM01);	  //enable CTC mode
  9e:	84 b5       	in	r24, 0x24	; 36
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= 0x05;			  //enable timer 0
  a4:	85 b5       	in	r24, 0x25	; 37
  a6:	85 60       	ori	r24, 0x05	; 5
  a8:	85 bd       	out	0x25, r24	; 37
	sei();					  //enable interrupt
  aa:	78 94       	sei
  ac:	ff cf       	rjmp	.-2      	; 0xac <main+0x1c>

000000ae <__vector_14>:
	}
}
uint8_t OVFCount=0;				//intialize overflo counter

ISR (TIMER0_COMPA_vect)		    //timer0 overflow interrupt
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	TCNT0=0x00;				    //resets the timer
  ba:	16 bc       	out	0x26, r1	; 38
	OVFCount++;				    //increment overflow count
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	if (OVFCount == 12)		    //overflow for delay off
  c6:	8c 30       	cpi	r24, 0x0C	; 12
  c8:	11 f4       	brne	.+4      	; 0xce <__vector_14+0x20>
	{
		PORTB= ~(1 << PORTB2);	//turn LED off
  ca:	8b ef       	ldi	r24, 0xFB	; 251
  cc:	85 b9       	out	0x05, r24	; 5
	}
	if(OVFCount == 22)			//overflow delay on
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d2:	86 31       	cpi	r24, 0x16	; 22
  d4:	21 f4       	brne	.+8      	; 0xde <__vector_14+0x30>
	{
		
		PORTB = (1 << PORTB2);	//turns LED on
  d6:	84 e0       	ldi	r24, 0x04	; 4
  d8:	85 b9       	out	0x05, r24	; 5
		OVFCount = 0;			//reset overflow counter
  da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}


}
  de:	8f 91       	pop	r24
  e0:	0f 90       	pop	r0
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	0f 90       	pop	r0
  e6:	1f 90       	pop	r1
  e8:	18 95       	reti

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
